/*
  motiondetector.h
  Copyright 2016 fyrelab
*/

#ifndef SRC_MODULES_MODULE_VIDEO_MOTIONDETECTOR_H_
#define SRC_MODULES_MODULE_VIDEO_MOTIONDETECTOR_H_

#include <vector>
#include <memory>
#include "modules/module_video/image.h"
#include "modules/module_video/detector.h"
#include "modules/module_video/backgroundsubtractor.h"

/**
 * Motion detector which uses one of the backgroundsubtractors and performs thresholding, noise reduction and dilation.
 */

class MotionDetector : public Detector {
 public:
  /**
   * @param module             The module object.
   * @param backgroundSub      The backgroundsubtractor to be used.
   * @param blurSize           Reduces noise in captured frames before detection calculations.
   * @param motionThreshold    Determines the threshold for the backgroundsubtractor.
   * @param dilationIterations Dilation applied 'dilationIterations' times.
   * @param dilationSize       Dilates the foreground mask generated by the Backgroundsubtractor.
   *                           The kernel describes how the pixels involved in the computation are
   *                           combined in order to obtain the desired result.
   * @param contoursThreshold  Discards countours with an area smaller than the threshold.
   */
  explicit MotionDetector(Engine &module, std::shared_ptr<BackgroundSubtractor> backgroundSub,
                          unsigned int blurSize = 5, unsigned int motionThreshold = 15,
                          unsigned int dilationIterations = 2, unsigned int dilationSize = 2,
                          double contoursThreshold = 1000);
  ~MotionDetector();
  void detect(Image &input, std::vector<cv::Rect> &rects);

 private:
  cv::Mat foreGroundMask_;
  std::shared_ptr<BackgroundSubtractor> backgroundSub_;
  unsigned int blurSize_;
  unsigned int motionThreshold_;
  unsigned int dilationIterations_;
  cv::Mat dilationKernel_;
  double contoursThreshold_;
};

#endif  // SRC_MODULES_MODULE_VIDEO_MOTIONDETECTOR_H_
